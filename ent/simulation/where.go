// Code generated by ent, DO NOT EDIT.

package simulation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/atamayoz/credit-go/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Simulation {
	return predicate.Simulation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Simulation {
	return predicate.Simulation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Simulation {
	return predicate.Simulation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Simulation {
	return predicate.Simulation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Simulation {
	return predicate.Simulation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Simulation {
	return predicate.Simulation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Simulation {
	return predicate.Simulation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Simulation {
	return predicate.Simulation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Simulation {
	return predicate.Simulation(sql.FieldLTE(FieldID, id))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldEQ(FieldAmount, v))
}

// Interest applies equality check predicate on the "interest" field. It's identical to InterestEQ.
func Interest(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldEQ(FieldInterest, v))
}

// Periods applies equality check predicate on the "periods" field. It's identical to PeriodsEQ.
func Periods(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldEQ(FieldPeriods, v))
}

// MonthlyPayment applies equality check predicate on the "monthly_payment" field. It's identical to MonthlyPaymentEQ.
func MonthlyPayment(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldEQ(FieldMonthlyPayment, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Simulation {
	return predicate.Simulation(sql.FieldEQ(FieldCreatedAt, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldLTE(FieldAmount, v))
}

// InterestEQ applies the EQ predicate on the "interest" field.
func InterestEQ(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldEQ(FieldInterest, v))
}

// InterestNEQ applies the NEQ predicate on the "interest" field.
func InterestNEQ(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldNEQ(FieldInterest, v))
}

// InterestIn applies the In predicate on the "interest" field.
func InterestIn(vs ...float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldIn(FieldInterest, vs...))
}

// InterestNotIn applies the NotIn predicate on the "interest" field.
func InterestNotIn(vs ...float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldNotIn(FieldInterest, vs...))
}

// InterestGT applies the GT predicate on the "interest" field.
func InterestGT(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldGT(FieldInterest, v))
}

// InterestGTE applies the GTE predicate on the "interest" field.
func InterestGTE(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldGTE(FieldInterest, v))
}

// InterestLT applies the LT predicate on the "interest" field.
func InterestLT(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldLT(FieldInterest, v))
}

// InterestLTE applies the LTE predicate on the "interest" field.
func InterestLTE(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldLTE(FieldInterest, v))
}

// PeriodsEQ applies the EQ predicate on the "periods" field.
func PeriodsEQ(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldEQ(FieldPeriods, v))
}

// PeriodsNEQ applies the NEQ predicate on the "periods" field.
func PeriodsNEQ(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldNEQ(FieldPeriods, v))
}

// PeriodsIn applies the In predicate on the "periods" field.
func PeriodsIn(vs ...float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldIn(FieldPeriods, vs...))
}

// PeriodsNotIn applies the NotIn predicate on the "periods" field.
func PeriodsNotIn(vs ...float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldNotIn(FieldPeriods, vs...))
}

// PeriodsGT applies the GT predicate on the "periods" field.
func PeriodsGT(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldGT(FieldPeriods, v))
}

// PeriodsGTE applies the GTE predicate on the "periods" field.
func PeriodsGTE(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldGTE(FieldPeriods, v))
}

// PeriodsLT applies the LT predicate on the "periods" field.
func PeriodsLT(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldLT(FieldPeriods, v))
}

// PeriodsLTE applies the LTE predicate on the "periods" field.
func PeriodsLTE(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldLTE(FieldPeriods, v))
}

// MonthlyPaymentEQ applies the EQ predicate on the "monthly_payment" field.
func MonthlyPaymentEQ(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldEQ(FieldMonthlyPayment, v))
}

// MonthlyPaymentNEQ applies the NEQ predicate on the "monthly_payment" field.
func MonthlyPaymentNEQ(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldNEQ(FieldMonthlyPayment, v))
}

// MonthlyPaymentIn applies the In predicate on the "monthly_payment" field.
func MonthlyPaymentIn(vs ...float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldIn(FieldMonthlyPayment, vs...))
}

// MonthlyPaymentNotIn applies the NotIn predicate on the "monthly_payment" field.
func MonthlyPaymentNotIn(vs ...float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldNotIn(FieldMonthlyPayment, vs...))
}

// MonthlyPaymentGT applies the GT predicate on the "monthly_payment" field.
func MonthlyPaymentGT(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldGT(FieldMonthlyPayment, v))
}

// MonthlyPaymentGTE applies the GTE predicate on the "monthly_payment" field.
func MonthlyPaymentGTE(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldGTE(FieldMonthlyPayment, v))
}

// MonthlyPaymentLT applies the LT predicate on the "monthly_payment" field.
func MonthlyPaymentLT(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldLT(FieldMonthlyPayment, v))
}

// MonthlyPaymentLTE applies the LTE predicate on the "monthly_payment" field.
func MonthlyPaymentLTE(v float64) predicate.Simulation {
	return predicate.Simulation(sql.FieldLTE(FieldMonthlyPayment, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Simulation {
	return predicate.Simulation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Simulation {
	return predicate.Simulation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Simulation {
	return predicate.Simulation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Simulation {
	return predicate.Simulation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Simulation {
	return predicate.Simulation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Simulation {
	return predicate.Simulation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Simulation {
	return predicate.Simulation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Simulation {
	return predicate.Simulation(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Simulation) predicate.Simulation {
	return predicate.Simulation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Simulation) predicate.Simulation {
	return predicate.Simulation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Simulation) predicate.Simulation {
	return predicate.Simulation(sql.NotPredicates(p))
}
