// Code generated by ent, DO NOT EDIT.

package simulation

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the simulation type in the database.
	Label = "simulation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldInterest holds the string denoting the interest field in the database.
	FieldInterest = "interest"
	// FieldPeriods holds the string denoting the periods field in the database.
	FieldPeriods = "periods"
	// FieldMonthlyPayment holds the string denoting the monthly_payment field in the database.
	FieldMonthlyPayment = "monthly_payment"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the simulation in the database.
	Table = "simulations"
)

// Columns holds all SQL columns for simulation fields.
var Columns = []string{
	FieldID,
	FieldAmount,
	FieldInterest,
	FieldPeriods,
	FieldMonthlyPayment,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Simulation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByInterest orders the results by the interest field.
func ByInterest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInterest, opts...).ToFunc()
}

// ByPeriods orders the results by the periods field.
func ByPeriods(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeriods, opts...).ToFunc()
}

// ByMonthlyPayment orders the results by the monthly_payment field.
func ByMonthlyPayment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMonthlyPayment, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
