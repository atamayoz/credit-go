// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/atamayoz/credit-go/ent/simulation"
)

// Simulation is the model entity for the Simulation schema.
type Simulation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// Interest holds the value of the "interest" field.
	Interest float64 `json:"interest,omitempty"`
	// Periods holds the value of the "periods" field.
	Periods float64 `json:"periods,omitempty"`
	// MonthlyPayment holds the value of the "monthly_payment" field.
	MonthlyPayment float64 `json:"monthly_payment,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Simulation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case simulation.FieldAmount, simulation.FieldInterest, simulation.FieldPeriods, simulation.FieldMonthlyPayment:
			values[i] = new(sql.NullFloat64)
		case simulation.FieldID:
			values[i] = new(sql.NullInt64)
		case simulation.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Simulation fields.
func (s *Simulation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case simulation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case simulation.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				s.Amount = value.Float64
			}
		case simulation.FieldInterest:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field interest", values[i])
			} else if value.Valid {
				s.Interest = value.Float64
			}
		case simulation.FieldPeriods:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field periods", values[i])
			} else if value.Valid {
				s.Periods = value.Float64
			}
		case simulation.FieldMonthlyPayment:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field monthly_payment", values[i])
			} else if value.Valid {
				s.MonthlyPayment = value.Float64
			}
		case simulation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Simulation.
// This includes values selected through modifiers, order, etc.
func (s *Simulation) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Simulation.
// Note that you need to call Simulation.Unwrap() before calling this method if this Simulation
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Simulation) Update() *SimulationUpdateOne {
	return NewSimulationClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Simulation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Simulation) Unwrap() *Simulation {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Simulation is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Simulation) String() string {
	var builder strings.Builder
	builder.WriteString("Simulation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", s.Amount))
	builder.WriteString(", ")
	builder.WriteString("interest=")
	builder.WriteString(fmt.Sprintf("%v", s.Interest))
	builder.WriteString(", ")
	builder.WriteString("periods=")
	builder.WriteString(fmt.Sprintf("%v", s.Periods))
	builder.WriteString(", ")
	builder.WriteString("monthly_payment=")
	builder.WriteString(fmt.Sprintf("%v", s.MonthlyPayment))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Simulations is a parsable slice of Simulation.
type Simulations []*Simulation
