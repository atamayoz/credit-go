// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/atamayoz/credit-go/ent/predicate"
	"github.com/atamayoz/credit-go/ent/simulation"
)

// SimulationUpdate is the builder for updating Simulation entities.
type SimulationUpdate struct {
	config
	hooks    []Hook
	mutation *SimulationMutation
}

// Where appends a list predicates to the SimulationUpdate builder.
func (su *SimulationUpdate) Where(ps ...predicate.Simulation) *SimulationUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetAmount sets the "amount" field.
func (su *SimulationUpdate) SetAmount(f float64) *SimulationUpdate {
	su.mutation.ResetAmount()
	su.mutation.SetAmount(f)
	return su
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (su *SimulationUpdate) SetNillableAmount(f *float64) *SimulationUpdate {
	if f != nil {
		su.SetAmount(*f)
	}
	return su
}

// AddAmount adds f to the "amount" field.
func (su *SimulationUpdate) AddAmount(f float64) *SimulationUpdate {
	su.mutation.AddAmount(f)
	return su
}

// SetInterest sets the "interest" field.
func (su *SimulationUpdate) SetInterest(f float64) *SimulationUpdate {
	su.mutation.ResetInterest()
	su.mutation.SetInterest(f)
	return su
}

// SetNillableInterest sets the "interest" field if the given value is not nil.
func (su *SimulationUpdate) SetNillableInterest(f *float64) *SimulationUpdate {
	if f != nil {
		su.SetInterest(*f)
	}
	return su
}

// AddInterest adds f to the "interest" field.
func (su *SimulationUpdate) AddInterest(f float64) *SimulationUpdate {
	su.mutation.AddInterest(f)
	return su
}

// SetPeriods sets the "periods" field.
func (su *SimulationUpdate) SetPeriods(f float64) *SimulationUpdate {
	su.mutation.ResetPeriods()
	su.mutation.SetPeriods(f)
	return su
}

// SetNillablePeriods sets the "periods" field if the given value is not nil.
func (su *SimulationUpdate) SetNillablePeriods(f *float64) *SimulationUpdate {
	if f != nil {
		su.SetPeriods(*f)
	}
	return su
}

// AddPeriods adds f to the "periods" field.
func (su *SimulationUpdate) AddPeriods(f float64) *SimulationUpdate {
	su.mutation.AddPeriods(f)
	return su
}

// SetMonthlyPayment sets the "monthly_payment" field.
func (su *SimulationUpdate) SetMonthlyPayment(f float64) *SimulationUpdate {
	su.mutation.ResetMonthlyPayment()
	su.mutation.SetMonthlyPayment(f)
	return su
}

// SetNillableMonthlyPayment sets the "monthly_payment" field if the given value is not nil.
func (su *SimulationUpdate) SetNillableMonthlyPayment(f *float64) *SimulationUpdate {
	if f != nil {
		su.SetMonthlyPayment(*f)
	}
	return su
}

// AddMonthlyPayment adds f to the "monthly_payment" field.
func (su *SimulationUpdate) AddMonthlyPayment(f float64) *SimulationUpdate {
	su.mutation.AddMonthlyPayment(f)
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *SimulationUpdate) SetCreatedAt(t time.Time) *SimulationUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *SimulationUpdate) SetNillableCreatedAt(t *time.Time) *SimulationUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// Mutation returns the SimulationMutation object of the builder.
func (su *SimulationUpdate) Mutation() *SimulationMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SimulationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SimulationUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SimulationUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SimulationUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SimulationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(simulation.Table, simulation.Columns, sqlgraph.NewFieldSpec(simulation.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Amount(); ok {
		_spec.SetField(simulation.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedAmount(); ok {
		_spec.AddField(simulation.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.Interest(); ok {
		_spec.SetField(simulation.FieldInterest, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedInterest(); ok {
		_spec.AddField(simulation.FieldInterest, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.Periods(); ok {
		_spec.SetField(simulation.FieldPeriods, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedPeriods(); ok {
		_spec.AddField(simulation.FieldPeriods, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.MonthlyPayment(); ok {
		_spec.SetField(simulation.FieldMonthlyPayment, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedMonthlyPayment(); ok {
		_spec.AddField(simulation.FieldMonthlyPayment, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(simulation.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{simulation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SimulationUpdateOne is the builder for updating a single Simulation entity.
type SimulationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SimulationMutation
}

// SetAmount sets the "amount" field.
func (suo *SimulationUpdateOne) SetAmount(f float64) *SimulationUpdateOne {
	suo.mutation.ResetAmount()
	suo.mutation.SetAmount(f)
	return suo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (suo *SimulationUpdateOne) SetNillableAmount(f *float64) *SimulationUpdateOne {
	if f != nil {
		suo.SetAmount(*f)
	}
	return suo
}

// AddAmount adds f to the "amount" field.
func (suo *SimulationUpdateOne) AddAmount(f float64) *SimulationUpdateOne {
	suo.mutation.AddAmount(f)
	return suo
}

// SetInterest sets the "interest" field.
func (suo *SimulationUpdateOne) SetInterest(f float64) *SimulationUpdateOne {
	suo.mutation.ResetInterest()
	suo.mutation.SetInterest(f)
	return suo
}

// SetNillableInterest sets the "interest" field if the given value is not nil.
func (suo *SimulationUpdateOne) SetNillableInterest(f *float64) *SimulationUpdateOne {
	if f != nil {
		suo.SetInterest(*f)
	}
	return suo
}

// AddInterest adds f to the "interest" field.
func (suo *SimulationUpdateOne) AddInterest(f float64) *SimulationUpdateOne {
	suo.mutation.AddInterest(f)
	return suo
}

// SetPeriods sets the "periods" field.
func (suo *SimulationUpdateOne) SetPeriods(f float64) *SimulationUpdateOne {
	suo.mutation.ResetPeriods()
	suo.mutation.SetPeriods(f)
	return suo
}

// SetNillablePeriods sets the "periods" field if the given value is not nil.
func (suo *SimulationUpdateOne) SetNillablePeriods(f *float64) *SimulationUpdateOne {
	if f != nil {
		suo.SetPeriods(*f)
	}
	return suo
}

// AddPeriods adds f to the "periods" field.
func (suo *SimulationUpdateOne) AddPeriods(f float64) *SimulationUpdateOne {
	suo.mutation.AddPeriods(f)
	return suo
}

// SetMonthlyPayment sets the "monthly_payment" field.
func (suo *SimulationUpdateOne) SetMonthlyPayment(f float64) *SimulationUpdateOne {
	suo.mutation.ResetMonthlyPayment()
	suo.mutation.SetMonthlyPayment(f)
	return suo
}

// SetNillableMonthlyPayment sets the "monthly_payment" field if the given value is not nil.
func (suo *SimulationUpdateOne) SetNillableMonthlyPayment(f *float64) *SimulationUpdateOne {
	if f != nil {
		suo.SetMonthlyPayment(*f)
	}
	return suo
}

// AddMonthlyPayment adds f to the "monthly_payment" field.
func (suo *SimulationUpdateOne) AddMonthlyPayment(f float64) *SimulationUpdateOne {
	suo.mutation.AddMonthlyPayment(f)
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *SimulationUpdateOne) SetCreatedAt(t time.Time) *SimulationUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *SimulationUpdateOne) SetNillableCreatedAt(t *time.Time) *SimulationUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// Mutation returns the SimulationMutation object of the builder.
func (suo *SimulationUpdateOne) Mutation() *SimulationMutation {
	return suo.mutation
}

// Where appends a list predicates to the SimulationUpdate builder.
func (suo *SimulationUpdateOne) Where(ps ...predicate.Simulation) *SimulationUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SimulationUpdateOne) Select(field string, fields ...string) *SimulationUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Simulation entity.
func (suo *SimulationUpdateOne) Save(ctx context.Context) (*Simulation, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SimulationUpdateOne) SaveX(ctx context.Context) *Simulation {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SimulationUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SimulationUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SimulationUpdateOne) sqlSave(ctx context.Context) (_node *Simulation, err error) {
	_spec := sqlgraph.NewUpdateSpec(simulation.Table, simulation.Columns, sqlgraph.NewFieldSpec(simulation.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Simulation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, simulation.FieldID)
		for _, f := range fields {
			if !simulation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != simulation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Amount(); ok {
		_spec.SetField(simulation.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedAmount(); ok {
		_spec.AddField(simulation.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.Interest(); ok {
		_spec.SetField(simulation.FieldInterest, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedInterest(); ok {
		_spec.AddField(simulation.FieldInterest, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.Periods(); ok {
		_spec.SetField(simulation.FieldPeriods, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedPeriods(); ok {
		_spec.AddField(simulation.FieldPeriods, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.MonthlyPayment(); ok {
		_spec.SetField(simulation.FieldMonthlyPayment, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedMonthlyPayment(); ok {
		_spec.AddField(simulation.FieldMonthlyPayment, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(simulation.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &Simulation{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{simulation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
